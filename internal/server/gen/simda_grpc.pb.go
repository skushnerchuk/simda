// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: simda.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Simda_StreamSnapshots_FullMethodName = "/daemon.Simda/StreamSnapshots"
)

// SimdaClient is the client API for Simda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimdaClient interface {
	StreamSnapshots(ctx context.Context, in *Request, opts ...grpc.CallOption) (Simda_StreamSnapshotsClient, error)
}

type simdaClient struct {
	cc grpc.ClientConnInterface
}

func NewSimdaClient(cc grpc.ClientConnInterface) SimdaClient {
	return &simdaClient{cc}
}

func (c *simdaClient) StreamSnapshots(ctx context.Context, in *Request, opts ...grpc.CallOption) (Simda_StreamSnapshotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Simda_ServiceDesc.Streams[0], Simda_StreamSnapshots_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simdaStreamSnapshotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Simda_StreamSnapshotsClient interface {
	Recv() (*Snapshot, error)
	grpc.ClientStream
}

type simdaStreamSnapshotsClient struct {
	grpc.ClientStream
}

func (x *simdaStreamSnapshotsClient) Recv() (*Snapshot, error) {
	m := new(Snapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimdaServer is the server API for Simda service.
// All implementations must embed UnimplementedSimdaServer
// for forward compatibility
type SimdaServer interface {
	StreamSnapshots(*Request, Simda_StreamSnapshotsServer) error
	mustEmbedUnimplementedSimdaServer()
}

// UnimplementedSimdaServer must be embedded to have forward compatible implementations.
type UnimplementedSimdaServer struct {
}

func (UnimplementedSimdaServer) StreamSnapshots(*Request, Simda_StreamSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshots not implemented")
}
func (UnimplementedSimdaServer) mustEmbedUnimplementedSimdaServer() {}

// UnsafeSimdaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimdaServer will
// result in compilation errors.
type UnsafeSimdaServer interface {
	mustEmbedUnimplementedSimdaServer()
}

func RegisterSimdaServer(s grpc.ServiceRegistrar, srv SimdaServer) {
	s.RegisterService(&Simda_ServiceDesc, srv)
}

func _Simda_StreamSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimdaServer).StreamSnapshots(m, &simdaStreamSnapshotsServer{stream})
}

type Simda_StreamSnapshotsServer interface {
	Send(*Snapshot) error
	grpc.ServerStream
}

type simdaStreamSnapshotsServer struct {
	grpc.ServerStream
}

func (x *simdaStreamSnapshotsServer) Send(m *Snapshot) error {
	return x.ServerStream.SendMsg(m)
}

// Simda_ServiceDesc is the grpc.ServiceDesc for Simda service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simda_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.Simda",
	HandlerType: (*SimdaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshots",
			Handler:       _Simda_StreamSnapshots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simda.proto",
}
