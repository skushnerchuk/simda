// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: simda.proto

package pb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period  uint32 `protobuf:"varint,1,opt,name=period,proto3" json:"period"`
	Warming uint32 `protobuf:"varint,2,opt,name=warming,proto3" json:"warming"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Request) GetWarming() uint32 {
	if x != nil {
		return x.Warming
	}
	return 0
}

// Загрузка системы
type LoadAverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One     float64 `protobuf:"fixed64,1,opt,name=one,proto3" json:"one"`
	Five    float64 `protobuf:"fixed64,2,opt,name=five,proto3" json:"five"`
	Fifteen float64 `protobuf:"fixed64,15,opt,name=fifteen,proto3" json:"fifteen"`
}

func (x *LoadAverage) Reset() {
	*x = LoadAverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadAverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadAverage) ProtoMessage() {}

func (x *LoadAverage) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadAverage.ProtoReflect.Descriptor instead.
func (*LoadAverage) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{1}
}

func (x *LoadAverage) GetOne() float64 {
	if x != nil {
		return x.One
	}
	return 0
}

func (x *LoadAverage) GetFive() float64 {
	if x != nil {
		return x.Five
	}
	return 0
}

func (x *LoadAverage) GetFifteen() float64 {
	if x != nil {
		return x.Fifteen
	}
	return 0
}

// Загрузка процессора
type CpuAverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   float64 `protobuf:"fixed64,1,opt,name=user,proto3" json:"user"`
	System float64 `protobuf:"fixed64,2,opt,name=system,proto3" json:"system"`
	Idle   float64 `protobuf:"fixed64,3,opt,name=idle,proto3" json:"idle"`
}

func (x *CpuAverage) Reset() {
	*x = CpuAverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuAverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuAverage) ProtoMessage() {}

func (x *CpuAverage) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuAverage.ProtoReflect.Descriptor instead.
func (*CpuAverage) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{2}
}

func (x *CpuAverage) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *CpuAverage) GetSystem() float64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *CpuAverage) GetIdle() float64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

// Сведения о дисках (i/o)
type DiskIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Tps     float64 `protobuf:"fixed64,2,opt,name=tps,proto3" json:"tps"`
	RdSpeed float64 `protobuf:"fixed64,3,opt,name=rdSpeed,proto3" json:"rdSpeed"`
	WrSpeed float64 `protobuf:"fixed64,4,opt,name=wrSpeed,proto3" json:"wrSpeed"`
}

func (x *DiskIO) Reset() {
	*x = DiskIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIO) ProtoMessage() {}

func (x *DiskIO) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIO.ProtoReflect.Descriptor instead.
func (*DiskIO) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{3}
}

func (x *DiskIO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskIO) GetTps() float64 {
	if x != nil {
		return x.Tps
	}
	return 0
}

func (x *DiskIO) GetRdSpeed() float64 {
	if x != nil {
		return x.RdSpeed
	}
	return 0
}

func (x *DiskIO) GetWrSpeed() float64 {
	if x != nil {
		return x.WrSpeed
	}
	return 0
}

// Сведения о дисках (usage)
type DiskUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device                string  `protobuf:"bytes,1,opt,name=device,proto3" json:"device"`
	MountPoint            string  `protobuf:"bytes,2,opt,name=mountPoint,proto3" json:"mountPoint"`
	UsagePercent          float64 `protobuf:"fixed64,3,opt,name=usagePercent,proto3" json:"usagePercent"`
	Usage                 float64 `protobuf:"fixed64,4,opt,name=usage,proto3" json:"usage"`
	InodeCount            float64 `protobuf:"fixed64,5,opt,name=inodeCount,proto3" json:"inodeCount"`
	InodeAvailablePercent float64 `protobuf:"fixed64,6,opt,name=inodeAvailablePercent,proto3" json:"inodeAvailablePercent"`
}

func (x *DiskUsage) Reset() {
	*x = DiskUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskUsage) ProtoMessage() {}

func (x *DiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskUsage.ProtoReflect.Descriptor instead.
func (*DiskUsage) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{4}
}

func (x *DiskUsage) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskUsage) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *DiskUsage) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *DiskUsage) GetUsage() float64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *DiskUsage) GetInodeCount() float64 {
	if x != nil {
		return x.InodeCount
	}
	return 0
}

func (x *DiskUsage) GetInodeAvailablePercent() float64 {
	if x != nil {
		return x.InodeAvailablePercent
	}
	return 0
}

// Сведения о процессе
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	CmdLine string `protobuf:"bytes,2,opt,name=cmdLine,proto3" json:"cmdLine"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{5}
}

func (x *Process) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

// Сетевой адрес
type SockAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
}

func (x *SockAddr) Reset() {
	*x = SockAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SockAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockAddr) ProtoMessage() {}

func (x *SockAddr) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockAddr.ProtoReflect.Descriptor instead.
func (*SockAddr) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{6}
}

func (x *SockAddr) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SockAddr) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Сетевые соединения
type NetConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    string    `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol"`
	Process     *Process  `protobuf:"bytes,2,opt,name=process,proto3,oneof" json:"process"`
	User        string    `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	LocalAddr   *SockAddr `protobuf:"bytes,4,opt,name=localAddr,proto3,oneof" json:"localAddr"`
	ForeignAddr *SockAddr `protobuf:"bytes,5,opt,name=foreignAddr,proto3,oneof" json:"foreignAddr"`
	State       string    `protobuf:"bytes,6,opt,name=state,proto3" json:"state"`
	UserId      uint32    `protobuf:"varint,7,opt,name=userId,proto3" json:"userId"`
}

func (x *NetConnection) Reset() {
	*x = NetConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetConnection) ProtoMessage() {}

func (x *NetConnection) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetConnection.ProtoReflect.Descriptor instead.
func (*NetConnection) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{7}
}

func (x *NetConnection) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetConnection) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *NetConnection) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *NetConnection) GetLocalAddr() *SockAddr {
	if x != nil {
		return x.LocalAddr
	}
	return nil
}

func (x *NetConnection) GetForeignAddr() *SockAddr {
	if x != nil {
		return x.ForeignAddr
	}
	return nil
}

func (x *NetConnection) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NetConnection) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// Сетевые соединения по состояниям
type NetConnectionStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *NetConnectionStates) Reset() {
	*x = NetConnectionStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetConnectionStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetConnectionStates) ProtoMessage() {}

func (x *NetConnectionStates) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetConnectionStates.ProtoReflect.Descriptor instead.
func (*NetConnectionStates) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{8}
}

func (x *NetConnectionStates) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NetConnectionStates) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Данные траффика по протоколам
type NetTopByProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string  `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol"`
	Bytes    uint64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes"`
	Percent  float64 `protobuf:"fixed64,3,opt,name=percent,proto3" json:"percent"`
}

func (x *NetTopByProtocol) Reset() {
	*x = NetTopByProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetTopByProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetTopByProtocol) ProtoMessage() {}

func (x *NetTopByProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetTopByProtocol.ProtoReflect.Descriptor instead.
func (*NetTopByProtocol) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{9}
}

func (x *NetTopByProtocol) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetTopByProtocol) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NetTopByProtocol) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

// Данные траффика по соединениям
type NetTopByConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string    `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol"`
	Bytes           uint64    `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes"`
	Percent         float64   `protobuf:"fixed64,3,opt,name=percent,proto3" json:"percent"`
	SourceAddr      *SockAddr `protobuf:"bytes,4,opt,name=sourceAddr,proto3" json:"sourceAddr"`
	DestinationAddr *SockAddr `protobuf:"bytes,5,opt,name=destinationAddr,proto3" json:"destinationAddr"`
}

func (x *NetTopByConnection) Reset() {
	*x = NetTopByConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetTopByConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetTopByConnection) ProtoMessage() {}

func (x *NetTopByConnection) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetTopByConnection.ProtoReflect.Descriptor instead.
func (*NetTopByConnection) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{10}
}

func (x *NetTopByConnection) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetTopByConnection) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NetTopByConnection) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *NetTopByConnection) GetSourceAddr() *SockAddr {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

func (x *NetTopByConnection) GetDestinationAddr() *SockAddr {
	if x != nil {
		return x.DestinationAddr
	}
	return nil
}

// Сообщение, содержащее сведения о включенных/отключенных в настройках метриках.
// Служит для корректного отображения в клиенте состояния той или иной метрики
type EnabledMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadAvg             bool `protobuf:"varint,1,opt,name=loadAvg,proto3" json:"loadAvg"`
	CpuAvg              bool `protobuf:"varint,2,opt,name=cpuAvg,proto3" json:"cpuAvg"`
	DiskIO              bool `protobuf:"varint,3,opt,name=diskIO,proto3" json:"diskIO"`
	DiskUsage           bool `protobuf:"varint,4,opt,name=diskUsage,proto3" json:"diskUsage"`
	NetConnections      bool `protobuf:"varint,5,opt,name=netConnections,proto3" json:"netConnections"`
	NetConnectionStates bool `protobuf:"varint,6,opt,name=netConnectionStates,proto3" json:"netConnectionStates"`
	NetTopByProtocol    bool `protobuf:"varint,7,opt,name=netTopByProtocol,proto3" json:"netTopByProtocol"`
	NetTopByConnection  bool `protobuf:"varint,8,opt,name=netTopByConnection,proto3" json:"netTopByConnection"`
}

func (x *EnabledMetrics) Reset() {
	*x = EnabledMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnabledMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnabledMetrics) ProtoMessage() {}

func (x *EnabledMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnabledMetrics.ProtoReflect.Descriptor instead.
func (*EnabledMetrics) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{11}
}

func (x *EnabledMetrics) GetLoadAvg() bool {
	if x != nil {
		return x.LoadAvg
	}
	return false
}

func (x *EnabledMetrics) GetCpuAvg() bool {
	if x != nil {
		return x.CpuAvg
	}
	return false
}

func (x *EnabledMetrics) GetDiskIO() bool {
	if x != nil {
		return x.DiskIO
	}
	return false
}

func (x *EnabledMetrics) GetDiskUsage() bool {
	if x != nil {
		return x.DiskUsage
	}
	return false
}

func (x *EnabledMetrics) GetNetConnections() bool {
	if x != nil {
		return x.NetConnections
	}
	return false
}

func (x *EnabledMetrics) GetNetConnectionStates() bool {
	if x != nil {
		return x.NetConnectionStates
	}
	return false
}

func (x *EnabledMetrics) GetNetTopByProtocol() bool {
	if x != nil {
		return x.NetTopByProtocol
	}
	return false
}

func (x *EnabledMetrics) GetNetTopByConnection() bool {
	if x != nil {
		return x.NetTopByConnection
	}
	return false
}

// Снимок метрик
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics              *EnabledMetrics        `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics"`
	LoadAvg              *LoadAverage           `protobuf:"bytes,2,opt,name=loadAvg,proto3" json:"loadAvg"`
	CpuAvg               *CpuAverage            `protobuf:"bytes,3,opt,name=cpuAvg,proto3" json:"cpuAvg"`
	DiskUsage            []*DiskUsage           `protobuf:"bytes,4,rep,name=diskUsage,proto3" json:"diskUsage"`
	DiskIO               []*DiskIO              `protobuf:"bytes,5,rep,name=diskIO,proto3" json:"diskIO"`
	NetConnections       []*NetConnection       `protobuf:"bytes,6,rep,name=netConnections,proto3" json:"netConnections"`
	NetConnectionsStates []*NetConnectionStates `protobuf:"bytes,7,rep,name=netConnectionsStates,proto3" json:"netConnectionsStates"`
	NetTopByProtocol     []*NetTopByProtocol    `protobuf:"bytes,8,rep,name=netTopByProtocol,proto3" json:"netTopByProtocol"`
	NetTopByConnection   []*NetTopByConnection  `protobuf:"bytes,9,rep,name=netTopByConnection,proto3" json:"netTopByConnection"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simda_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_simda_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_simda_proto_rawDescGZIP(), []int{12}
}

func (x *Snapshot) GetMetrics() *EnabledMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Snapshot) GetLoadAvg() *LoadAverage {
	if x != nil {
		return x.LoadAvg
	}
	return nil
}

func (x *Snapshot) GetCpuAvg() *CpuAverage {
	if x != nil {
		return x.CpuAvg
	}
	return nil
}

func (x *Snapshot) GetDiskUsage() []*DiskUsage {
	if x != nil {
		return x.DiskUsage
	}
	return nil
}

func (x *Snapshot) GetDiskIO() []*DiskIO {
	if x != nil {
		return x.DiskIO
	}
	return nil
}

func (x *Snapshot) GetNetConnections() []*NetConnection {
	if x != nil {
		return x.NetConnections
	}
	return nil
}

func (x *Snapshot) GetNetConnectionsStates() []*NetConnectionStates {
	if x != nil {
		return x.NetConnectionsStates
	}
	return nil
}

func (x *Snapshot) GetNetTopByProtocol() []*NetTopByProtocol {
	if x != nil {
		return x.NetTopByProtocol
	}
	return nil
}

func (x *Snapshot) GetNetTopByConnection() []*NetTopByConnection {
	if x != nil {
		return x.NetTopByConnection
	}
	return nil
}

var File_simda_proto protoreflect.FileDescriptor

var file_simda_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x64, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x3a, 0xb3, 0x01, 0xba, 0x48, 0xaf, 0x01, 0x1a, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x57, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x77, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x20, 0x3e, 0x3d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x1a, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x31, 0x32, 0x30, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x1a, 0x13, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20,
	0x3c, 0x3d, 0x20, 0x31, 0x32, 0x30, 0x22, 0x4d, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x69,
	0x66, 0x74, 0x65, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x0a, 0x43, 0x70, 0x75, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69,
	0x64, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x77, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x22, 0x2e, 0x0a, 0x08, 0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x48, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x41, 0x0a, 0x13,
	0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5e, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22,
	0xce, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x22, 0xae, 0x02, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x70, 0x75, 0x41, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x70, 0x75, 0x41, 0x76, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x92, 0x04, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x67, 0x12,
	0x2a, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x41, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x70, 0x75, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x63, 0x70, 0x75, 0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x06, 0x64, 0x69,
	0x73, 0x6b, 0x49, 0x4f, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x6e, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x41, 0x0a, 0x05, 0x53, 0x69, 0x6d, 0x64, 0x61, 0x12,
	0x38, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x0f, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_simda_proto_rawDescOnce sync.Once
	file_simda_proto_rawDescData = file_simda_proto_rawDesc
)

func file_simda_proto_rawDescGZIP() []byte {
	file_simda_proto_rawDescOnce.Do(func() {
		file_simda_proto_rawDescData = protoimpl.X.CompressGZIP(file_simda_proto_rawDescData)
	})
	return file_simda_proto_rawDescData
}

var file_simda_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_simda_proto_goTypes = []interface{}{
	(*Request)(nil),             // 0: daemon.Request
	(*LoadAverage)(nil),         // 1: daemon.LoadAverage
	(*CpuAverage)(nil),          // 2: daemon.CpuAverage
	(*DiskIO)(nil),              // 3: daemon.DiskIO
	(*DiskUsage)(nil),           // 4: daemon.DiskUsage
	(*Process)(nil),             // 5: daemon.Process
	(*SockAddr)(nil),            // 6: daemon.SockAddr
	(*NetConnection)(nil),       // 7: daemon.NetConnection
	(*NetConnectionStates)(nil), // 8: daemon.NetConnectionStates
	(*NetTopByProtocol)(nil),    // 9: daemon.NetTopByProtocol
	(*NetTopByConnection)(nil),  // 10: daemon.NetTopByConnection
	(*EnabledMetrics)(nil),      // 11: daemon.EnabledMetrics
	(*Snapshot)(nil),            // 12: daemon.Snapshot
}
var file_simda_proto_depIdxs = []int32{
	5,  // 0: daemon.NetConnection.process:type_name -> daemon.Process
	6,  // 1: daemon.NetConnection.localAddr:type_name -> daemon.SockAddr
	6,  // 2: daemon.NetConnection.foreignAddr:type_name -> daemon.SockAddr
	6,  // 3: daemon.NetTopByConnection.sourceAddr:type_name -> daemon.SockAddr
	6,  // 4: daemon.NetTopByConnection.destinationAddr:type_name -> daemon.SockAddr
	11, // 5: daemon.Snapshot.metrics:type_name -> daemon.EnabledMetrics
	1,  // 6: daemon.Snapshot.loadAvg:type_name -> daemon.LoadAverage
	2,  // 7: daemon.Snapshot.cpuAvg:type_name -> daemon.CpuAverage
	4,  // 8: daemon.Snapshot.diskUsage:type_name -> daemon.DiskUsage
	3,  // 9: daemon.Snapshot.diskIO:type_name -> daemon.DiskIO
	7,  // 10: daemon.Snapshot.netConnections:type_name -> daemon.NetConnection
	8,  // 11: daemon.Snapshot.netConnectionsStates:type_name -> daemon.NetConnectionStates
	9,  // 12: daemon.Snapshot.netTopByProtocol:type_name -> daemon.NetTopByProtocol
	10, // 13: daemon.Snapshot.netTopByConnection:type_name -> daemon.NetTopByConnection
	0,  // 14: daemon.Simda.StreamSnapshots:input_type -> daemon.Request
	12, // 15: daemon.Simda.StreamSnapshots:output_type -> daemon.Snapshot
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_simda_proto_init() }
func file_simda_proto_init() {
	if File_simda_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_simda_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadAverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuAverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SockAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetConnectionStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetTopByProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetTopByConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnabledMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simda_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_simda_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_simda_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_simda_proto_goTypes,
		DependencyIndexes: file_simda_proto_depIdxs,
		MessageInfos:      file_simda_proto_msgTypes,
	}.Build()
	File_simda_proto = out.File
	file_simda_proto_rawDesc = nil
	file_simda_proto_goTypes = nil
	file_simda_proto_depIdxs = nil
}
